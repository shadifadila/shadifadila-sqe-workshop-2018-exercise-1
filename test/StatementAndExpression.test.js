import assert from 'assert';
import {parseCode} from '../src/js/code-analyzer';
import {start} from '../src/js/Statement';

describe('The javascript parser', () => {
    it(' empty', () => { assert.equal( JSON.stringify(start(parseCode(''))),'[]'); });
    it(' nul EXP Test', () => { assert.equal( JSON.stringify(start(JSON.parse('{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"UnKnownExp","value":5,"raw":"5","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":1}}},"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":1}}}],"sourceType":"script","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":1}}}'))),'[]'); });
    it(' For with var dec ', () => { assert.equal( JSON.stringify(start(parseCode('for(let I=8; I<18;i++) { k++;}'))),'[{"Line":1,"Type":"for statement","Name":"","Condition":"I<18","Value":""},{"Line":1,"Type":"variable declaration","Name":"I","Condition":"","Value":"8"},{"Line":1,"Type":"Update Expression","Name":"","Condition":"","Value":"i++"},{"Line":1,"Type":"Update Expression","Name":"","Condition":"","Value":"k++"}]'); });
    it(' If then', () => { assert.equal( JSON.stringify(start(parseCode('if(x < 10 && y > 1) x=6;'))),'[{"Line":1,"Type":"if statement","Name":"","Condition":"x<10&&y>1","Value":""},{"Line":1,"Type":"assignment expression","Name":"x","Condition":"","Value":"6"}]'); });
    it('10 && y', () => { assert.equal( JSON.stringify(start(parseCode('10 && y'))),'[{"Line":1,"Type":"Logical Expression","Name":"","Condition":"","Value":"10&&y"}]'); });
    it(' variable deceleration ', () => { assert.equal( JSON.stringify(start(parseCode('let a = 1;'))),'[{"Line":1,"Type":"variable declaration","Name":"a","Condition":"","Value":"1"}]'); });
    it(' function deceleration', () => { assert.equal( JSON.stringify(start(parseCode('function test(){}'))),'[{"Line":1,"Type":"function declaration","Name":"test","Condition":"","Value":""}]'); });
    it('variable function  ', () => { assert.equal( JSON.stringify(start(parseCode('function test(a,b,c,d,e,f){}'))),'[{"Line":1,"Type":"function declaration","Name":"test","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"a","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"b","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"c","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"d","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"e","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"f","Condition":"","Value":""}]'); });
    it(' if statement ', () => { assert.equal( JSON.stringify(start(parseCode('if( x==2)  x=3; else x=5;'))),'[{"Line":1,"Type":"if statement","Name":"","Condition":"x==2","Value":""},{"Line":1,"Type":"assignment expression","Name":"x","Condition":"","Value":"3"},{"Line":1,"Type":"assignment expression","Name":"x","Condition":"","Value":"5"}]'); });
    it(' return statement ', () => { assert.equal( JSON.stringify(start(parseCode('function test() { return 5; }'))),'[{"Line":1,"Type":"function declaration","Name":"test","Condition":"","Value":""},{"Line":1,"Type":"return statement","Name":"","Condition":"","Value":"5"}]'); });
    it(' assignment expression', () => { assert.equal( JSON.stringify(start(parseCode('high = n - 1;'))),'[{"Line":1,"Type":"assignment expression","Name":"high","Condition":"","Value":"n-1"}]'); });
    it(' while statement', () => { assert.equal( JSON.stringify(start(parseCode('while (low <= high) { let b=9; }'))),'[{"Line":1,"Type":"while statement","Name":"","Condition":"low<=high","Value":""},{"Line":1,"Type":"variable declaration","Name":"b","Condition":"","Value":"9"}]'); });
    it(' for statement', () => { assert.equal( JSON.stringify(start(parseCode('for(I=0;i<5;i++){ I; let x=8;}'))),'[{"Line":1,"Type":"for statement","Name":"","Condition":"i<5","Value":""},{"Line":1,"Type":"assignment expression","Name":"I","Condition":"","Value":"0"},{"Line":1,"Type":"Update Expression","Name":"","Condition":"","Value":"i++"},{"Line":1,"Type":"Identifier","Name":"","Condition":"","Value":"I"},{"Line":1,"Type":"variable declaration","Name":"x","Condition":"","Value":"8"}]'); });
    it(' do while', () => { assert.equal( JSON.stringify(start(parseCode('do {let x=5;} while (false);'))),'[{"Line":1,"Type":"Do While Statement","Name":"","Condition":"false","Value":""},{"Line":1,"Type":"variable declaration","Name":"x","Condition":"","Value":"5"}]'); });
    it(' function binarySearch(X, V, n) TEST', () => { assert.equal( JSON.stringify(start(parseCode('function binarySearch(X, V, n){ let low, high, mid; low = 0; high = n - 1; while (low <= high) { mid = (low + high)/2; if (X < V[mid]) high = mid - 1; else if (X > V[mid]) low = mid + 1; else return mid; } return -1; }'))),'[{"Line":1,"Type":"function declaration","Name":"binarySearch","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"X","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"V","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"n","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"low","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"high","Condition":"","Value":""},{"Line":1,"Type":"variable declaration","Name":"mid","Condition":"","Value":""},{"Line":1,"Type":"assignment expression","Name":"low","Condition":"","Value":"0"},{"Line":1,"Type":"assignment expression","Name":"high","Condition":"","Value":"n-1"},{"Line":1,"Type":"while statement","Name":"","Condition":"low<=high","Value":""},{"Line":1,"Type":"assignment expression","Name":"mid","Condition":"","Value":"low+high/2"},{"Line":1,"Type":"if statement","Name":"","Condition":"X<V[mid]","Value":""},{"Line":1,"Type":"assignment expression","Name":"high","Condition":"","Value":"mid-1"},{"Line":1,"Type":"else if statement","Name":"","Condition":"X>V[mid]","Value":""},{"Line":1,"Type":"return statement","Name":"","Condition":"","Value":"mid"},{"Line":1,"Type":"return statement","Name":"","Condition":"","Value":"-1"}]'); });
    it(' I++; x ; I==9; -1; 8; x<5; v[6];', () => { assert.equal( JSON.stringify(start(parseCode(' I++; x ; I==9; -1; 8; x<5; v[6];'))),'[{"Line":1,"Type":"Update Expression","Name":"","Condition":"","Value":"I++"},{"Line":1,"Type":"Identifier","Name":"","Condition":"","Value":"x"},{"Line":1,"Type":"Binary Expression","Name":"","Condition":"","Value":"I==9"},{"Line":1,"Type":"Unary Expression","Name":"","Condition":"","Value":"-1"},{"Line":1,"Type":"Literal","Name":"","Condition":"","Value":"8"},{"Line":1,"Type":"Binary Expression","Name":"","Condition":"","Value":"x<5"},{"Line":1,"Type":"Member Expression","Name":"v[6]","Condition":"","Value":""}]'); });
});